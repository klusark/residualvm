struct light {
	vec4 _position;
	vec4 _direction;
	vec4 _color;
};

struct shadow_info {
	bool _active;
	vec3 _color;
	vec3 _light;
	vec3 _point;
	vec3 _normal;
};

const int maxLights = 8;
const float DIFFUSE_FACTOR = 0.8;

in vec3 position;
in vec2 texcoord;
in vec4 color;
in vec3 normal;
in int texturen;

uniform highp mat4 modelMatrix;
uniform highp mat4 viewMatrix;
uniform highp mat4 projMatrix;
uniform highp mat4 extraMatrix;
uniform light lights[maxLights];
uniform highp vec2 texscale[8];
uniform shadow_info shadow;
uniform bool lightsEnabled;

out vec2 Texcoord;
out vec4 Color;
flat out int textureno;

void main()
{
	vec4 pos = vec4(position, 1.0);

	pos = modelMatrix *
	      extraMatrix *
	      pos;

	// See http://en.wikipedia.org/wiki/Line-plane_intersection
	if (shadow._active) {
		pos /= pos.w;
		vec3 l = pos.xyz - shadow._light;
		float d = dot(shadow._point - shadow._light, shadow._normal) / dot(l, shadow._normal);
		vec3 p = shadow._light + d * l;
		pos = vec4(p, 1.0);
	}

	gl_Position = projMatrix * viewMatrix * pos;
	textureno = texturen;
	if (texturen != 0) {
		Texcoord = vec2(0.0, 1.0) + (texcoord / texscale[texturen - 1]);
	} else {
		Texcoord = vec2(0.0, 0.0);
	}

/*
	if (lightsEnabled) {
		vec3 normal_eye = normalize((mvpMatrix * extraMatrix * vec4(normal, 0.0))).xyz;
		vec3 light = vec3(0.0, 0.0, 0.0);
		for (int i = 0; i < maxLights; ++i) {
			if (lights[i]._color.w != 0.0) {
				vec3 faceToLight = normalize(lights[i]._position - pos).xyz;
				if (lights[i]._position.w == 1.0) {
					float incidence = dot(normal_eye, faceToLight);
					if (incidence > 0.0) {
						if (lights[i]._direction.w == -1.0) {
							light += incidence * DIFFUSE_FACTOR * lights[i]._color.rgb;
						} else {
							vec3 lightDir = normalize(lights[i]._direction.xyz);
							float cos_angle = dot(lightDir, faceToLight);
							float incidence2 = max(-cos_angle, 0.0);
							light += incidence2 * DIFFUSE_FACTOR * lights[i]._color.rgb;
						}
					}
				} else {
					vec3 lightDir = normalize(lights[i]._position.xyz);
					float incidence = dot(lightDir, faceToLight);
					light += max(-incidence, 0.0) * DIFFUSE_FACTOR * lights[i]._color.rgb;
				}
			}
		}
		Color = color * vec4(light, 1.0);
	} else */ {
		Color = color;
		if (shadow._active) {
			Color = vec4(shadow._color, 1.0);
		}
	}
}
